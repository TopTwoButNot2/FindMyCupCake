@model FindMyCupCake.Models.MyCupCake

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>MyCupCake</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.travelto, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="text" name="travelto" id="travelto" required="required" placeholder="Destination" class="form-control" />
                @Html.ValidationMessageFor(model => model.travelto, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.travelfrom, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="text" name="travelfrom" id="travelfrom" required="required" placeholder="Source" class="form-control" />
                @Html.ValidationMessageFor(model => model.travelfrom, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TypeOfTransport, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TypeOfTransport, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TypeOfTransport, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PricePerKm, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PricePerKm, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PricePerKm, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PricePerhr, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PricePerhr, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PricePerhr, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Distance, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Distance, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Distance, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default"/>
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    @*<div class="form-horizontal modal-content" style="margin-top: 2%; width: 45%; padding-right: 30px; padding-right: 30px; margin-bottom: 50px">*@
    <div class="fa-align-center" style="margin-top: 2%; width: 45%; padding-right: 30px; padding-right: 30px; margin-bottom: 50px">


        <input type="text" id="totdistance" style="display:none" />
        <div>
            @*Destination:  <input id="travelto" type="text" name="name" />*@
            @*<input type="button" value="Add" onclick="PushDestination()"/>*@

        </div>
        <div id="destinations"></div><br />
        @*Source : <input id="travelfrom" type="text" name="name" /> <br /> <br />*@


        <input type="button" value="Get Directions" onclick="GetRoute()" />
        <p></p>
        <br />
        <div id="dvDistance">
            <table id="tblResults" border="1" cellpadding="10">
                <tr>
                    <th> Source </th>
                    <th> Destination </th>
                    <th> Distance </th>
                    <th> Duration </th>
                </tr>
            </table>

        </div>

        <p></p>

        <div id="dvMap" style="min-height: 300px"></div>

    </div>



    <!--ENSURE YOU CHANGE TO YOUR OWN API KEY HERE !!! -->
    <script src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyADuwbDLRqQ9fT4_gsYrpX40TkRJof4Shs" type="text/javascript"></script>
    </div>
    <!-- code for example 1 -->
    <script>
        var source, destination;
        var locations = [];
        var directionsDisplay;
        var directionsService = new google.maps.DirectionsService();
        // initialise the location of the map on Chichester in England (ref lat and lng)
        var map = new google.maps.Map(document.getElementById('dvMap'), {
            center: { lat: 50.834697, lng: -0.773792 },
            zoom: 13,
            mapTypeId: 'roadmap'
        });
        google.maps.event.addDomListener(window, 'load', function () {
            new google.maps.places.SearchBox(document.getElementById('travelfrom'));
            new google.maps.places.SearchBox(document.getElementById('travelto'));
            directionsDisplay = new google.maps.DirectionsRenderer({ 'draggable': true });
        });
        function PushDestination() {
            destination = document.getElementById("travelto").value;
            locations.push(destination);
            //document.getElementById("travelto").value = "";
            destinationArray = document.getElementById("destinations");
            destinationArray.innerHTML += destination + "<br />";
        }
        function setDestination(dest) {
            document.getElementById('travelto').value = dest;
            PushDestination();
        }
        function GetRoute() {
            PushDestination();
            directionsDisplay.setMap(map);
            source = document.getElementById("travelfrom").value;
            destination = document.getElementById("travelto").value;
            var waypoints = [];
            for (var i = 0; i < locations.length; i++) {
                var address = locations[i];
                if (address !== "") {
                    waypoints.push({
                        location: address,
                        stopover: true
                    });
                }
            }
            var request = {
                origin: source,
                destination: waypoints[0].location,
                waypoints: waypoints, //an array of waypoints
                optimizeWaypoints: true, //set to true if you want google to determine the shortest route or false to use the order specified.
                travelMode: google.maps.DirectionsTravelMode.DRIVING
            };
            directionsService.route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    var dvDistance = document.getElementById("dvDistance");
                    var distance = 0;
                    var minute = 0.00;
                    response.routes[0].legs.forEach(function (item, index) {
                        if (index < response.routes[0].legs.length - 1) {
                            distance = distance + parseInt(item.distance.text);
                            document.getElementById("Distance").value = distance;
                            document.getElementById("totdistance").value = distance;
                            minute = parseFloat(minute) + parseFloat(item.duration.value / 60);
                            document.getElementById("Duration").value = minute;
                            tbl = document.getElementById("tblResults");
                            var row = tbl.insertRow(1);
                            var cell = row.insertCell(0);
                            cell.innerText = source;
                            var cell = row.insertCell(1);
                            cell.innerText = item.end_address;
                            var cell = row.insertCell(2);
                            cell.innerText = distance;
                            var cell = row.insertCell(3);
                            cell.innerText = minute.toFixed(2) + " min";
                        }
                    });
                    directionsDisplay.setDirections(response);
                }
                else {
                    //handle error
                }
            })
        };
    </script>
    <!-- end code for example 1 -->
}
